PACMAN
	to sync latest pacakges
sudo pacman -Sy
	to search for a package and then you can also pipe it into grep
pacman -Ss <package_name_or_keyword>
	to install a package (-S: Sync packages (it also handles installation))
sudo pacman -S <package_name>
	to see all installed packages or the one exactly mentioned, alternatively you can pipe the resutls to grep
pacman -Q
	to search for an installed package and see what it does (suprisingly works with fuzzy search)
pacman -Qs <package_name_or_keyword>
	to upgrade the whole system
sudo pacman -Syu
	to reinstall a package (A safer way if you suspect file corruption might be to simply run the install command again without --force; pacman will usually handle it correctly.)
sudo pacman -S <package_name> --force
	to show detailed information for an installed package (version, dependiencies, dependednt on, size, date and EVERYTHING) perfect command. 
pacman -Qi <package_name>
	to show detailed infor for a package that's not installed. same as above but for repo packages that aren't installed.
pacman -Si <package_name>
	To remove a package but keep its dependencies if they are required by other installed packages
sudo pacman -R <package_name>
	-R: Removes the package itself.
	-n: Removes the package's configuration files from /etc.
	-s: Removes dependencies that are no longer needed by any other installed package.
sudo pacman -Rns xyz
	To remove a package and its dependencies that are not required by any other installed package
sudo pacman -Rs <package_name>
	To remove a package that is required by another package (use with caution!)
sudo pacman -Rdd <package_name>
	Cleaning the Package Cache: pacman keeps downloaded packages in a cache (/var/cache/pacman/pkg/)
	To remove cached versions of packages that are no longer installed
sudo pacman -Sc
	To remove all files from the cache (use with caution, as you won't be able to downgrade or reinstall from the cache)
sudo pacman -Scc

	The Arch User Repository (AUR): This is a community-driven repository. It contains PKGBUILDs (package build scripts) that allow you to compile software from source or other locations and install it using pacman. Packages in the AUR are not officially supported by Arch Linux and are built by users.
	While you can manually download PKGBUILDs and build packages yourself using makepkg, for a new user and for convenience, using an AUR helper is highly recommended. AUR helpers automate the process of searching the AUR, downloading PKGBUILDs, resolving dependencies (including AUR dependencies), compiling, and installing packages using pacman
	Popular AUR helpers include yay, pamac (with its CLI), and paru
	Installing an AUR helper (like yay): Since AUR helpers are themselves often in the AUR, you typically need to install one manually first. This involves cloning its Git repository, building it with makepkg, and installing it with pacman
	example for yay
	
	to install yay
sudo pacman -S --needed base-devel git # Install necessary tools
git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si

	to install paru
git clone https://aur.archlinux.org/paru.git
cd paru
makepkg -si

	Using an AUR helper (like yay): Once installed, using an AUR helper is very similar to using pacman.
	Searching the AUR eg.. and same for others. 
yay -Ss <package_name_or_keyword>

Here is a comprehensive list of common pacman options, categorized by their primary operation, with a brief summary of what each option does. This list focuses on the options you'll use most frequently.

Note: Options are often combined (e.g., -Syu, -Qi).
Synchronize Options (-S) - Used for installing, upgrading, and syncing packages

    -S, --sync: Synchronize packages. This is the primary operation for installing and upgrading packages and querying the sync database.
    -y, --refresh: Download fresh package databases from the server. Always use with -S or -U before a system upgrade or search.
    -u, --sysupgrade: Upgrade installed packages. Use with -S to perform a full system upgrade (-Syu).
    -w, --downloadonly: Download packages but do not install or upgrade anything.
    -c, --clean: Clean the package cache. Used with -S (e.g., pacman -Sc or pacman -Scc).
        -c (single): Removes cached versions of packages that are no longer installed.
        -cc (double): Removes all files from the cache.
    -d, --nodeps: Skip dependency checks. Use with extreme caution.
    -f, --force: Force the operation. Can be used to force installation/reinstallation. Use with caution.
    -i, --info: Display information about a package from the sync database. Used with -S (e.g., pacman -Si <package>).
    -s, --search <regexp>: Search the sync database for packages matching a regular expression. Used with -S (e.g., pacman -Ss <keyword>).
    --needed: Do not reinstall the target(s) if they are already up-to-date. Useful for scripts.
    --noconfirm: Do not ask for confirmation on transactions. Use with extreme caution.
    --print-format <format>: Specify the output format when printing package information.

Query Options (-Q) - Used for querying the local package database

    -Q, --query: Query the package database. This is the primary operation for inspecting installed packages.
    -i, --info: Display information about a locally installed package. Used with -Q (e.g., pacman -Qi <package>).
    -s, --search <regexp>: Search the local database for installed packages matching a regular expression. Used with -Q (e.g., pacman -Qs <keyword>).
    -l, --list: List the files owned by a package. Used with -Q (e.g., pacman -Ql <package>).
    -o, --owns <file>: Search which package owns a specific file. Used with -Q (e.g., pacman -Qo /path/to/file).
    -k, --check: Check the local database for corrupted files or missing dependencies. Use with -Q.
        -k (single): Check if package files are missing.
        -kk (double): Check if package files are missing and perform a full file checksum check.
    -t, --unrequired: List packages that are not required by any other installed package (potential orphans). Use with -Q (e.g., pacman -Qtt).
    -e, --explicit: List packages that were explicitly installed (not installed as dependencies). Use with -Q.
    -m, --foreign: List packages that are not found in the sync databases (often AUR packages installed manually or via helper). Use with -Q.
    -a, --all: Query all installed packages. Use with -Q (e.g., pacman -Qa).

Remove Options (-R) - Used for removing packages

    -R, --remove: Remove package(s).
    -s, --recursive: Remove the target(s) and their dependencies, provided they are not required by other packages. Use with -R (e.g., pacman -Rs <package>).
    -c, --cascade: Remove the target(s), their dependencies, and all packages that depend on the target(s). Use with extreme caution.
    -u, --unneeded: Remove packages that are no longer required as dependencies by any installed package (orphans). Use with -R (e.g., pacman -Rsu).
    -d, --nodeps: Skip dependency checks. Use with extreme caution.
    -n, --nosave: Remove configuration files as well. By default, pacman saves dotfiles (.*) when removing.

Upgrade/Install Options (-U) - Used for installing local or remote packages

    -U, --upgrade <file>: Install or upgrade a package from a local file or a remote URL.
    -d, --nodeps: Skip dependency checks. Use with extreme caution.
    -f, --force: Force the installation/upgrade. Use with caution.
    --noconfirm: Do not ask for confirmation. Use with extreme caution.

General Options (can often be used with various operations)

    -h, --help: Display a help message.
    -v, --verbose: Output more information.
    -V, --version: Display version information.
    --cachedir <dir>: Set the directory for cached packages.
    --config <file>: Set the configuration file to use.
    --root <path>: Set the installation root path.
    --arch <arch>: Set the architecture.

This list covers the most important and commonly used options for managing packages with pacman in the terminal. Remember to refer to the pacman(8) man page (man pacman) for the complete and most up-to-date documentation.	

PARU VS YAY
	paru is new written in rust while yay is old and written in go. 
paru might be slightly better. 

	this is important to know there are >> and >
	this means to overright the file with the fed info
>
	this means to append aka add the additional info to the file
>>

RAM
	to see details about ram usage
free -h
	to see disk free in human readable formant -h is for human
df -h

JOURNALCTL
	to see all the erros on your current boot by priority
journalctl -b -p err..warning
	logs around a certain time frame / timestamp
journalctl -b --since "07:16:40" --until "07:16:45"

ZRAM
	set this as config
[zram0]
zram-size = 12768
compression-algorithm = zstd

	reload systemd deamons from disk to ram
sudo systemctl daemon-reload
	restart the zram unit/ service. 
sudo systemctl restart systemd-zram-setup@zram0.service
	check the services status.
sudo systemctl status systemd-zram-setup@zram0.service
	if it fails, the text in the config needs to be rewritten and all then deamon reloaded and service restart and status check. all over agian. the config needs to be pefect. sometimes manually writting it is better. 
	
NVIDIA

	Installing the NVIDIA Driver and blacklisting/Handling Nouveau
	make sure any previously proprietary driver is removoved if you installed them. 
	3050 Ti is supported by the main nvidia package. However, to handle kernel updates automatically, it's strongly recommended to use the DKMS version.
	make sure your kernal-headers are installed first.
sudo pacman -S linux-headers linux-lts-headers (ltsheaders only if that kernal is also instlaled.)
	install nvidia-dkms and other stuff
sudo pacman -S nvidia-dkms nvidia-utils nvidia-settings
	(it'll install the following packages and dependencies Packages (7) dkms-3.1.8-1  egl-gbm-1.1.2.1-1  egl-x11-1.0.1-1  libxnvctrl-570.144-1  nvidia-dkms-570.144-3  nvidia-settings-570.144-1  nvidia-utils-570.144-3)
	nvidia-dkms: Installs the driver source and uses DKMS to automatically rebuild the kernel module when you update your kernel.
	nvidia-utils: Provides essential libraries and utilities like nvidia-smi.
	nvidia-settings: A graphical tool for configuration (some features might be limited under Wayland).
	Blacklist Nouveau: The nvidia-dkms package should automatically install a file (/usr/lib/modprobe.d/nvidia.conf or similar) that blacklists the open-source nouveau driver. You can verify this:
grep nouveau /usr/lib/modprobe.d/nvidia*.conf
	If it shows a line like blacklist nouveau, you're set. If not, or to be absolutely sure, create a file:
sudo nano /etc/modprobe.d/blacklist-nouveau.conf
	Add the following line:
blacklist nouveau
	Enable NVIDIA Kernel Mode Setting (KMS): This is crucial for Wayland and a smooth graphical boot. You need to add nvidia_drm.modeset=1 to your kernel parameters.
	How to add kernel parameters: This depends on your bootloader (e.g., GRUB, systemd-boot).
GRUB: Edit /etc/default/grub. Find the line starting with GRUB_CMDLINE_LINUX_DEFAULT= and add nvidia_drm.modeset=1 inside the quotes, separated by spaces from other options (e.g., GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet nvidia_drm.modeset=1"). Then, run sudo grub-mkconfig -o /boot/grub/grub.cfg.
systemd-boot: Edit the relevant entry file in /boot/loader/entries/ (e.g., linux..xyz.conf). Append nvidia_drm.modeset=1 to the options line.
	Rebuild the Initramfs: After installing drivers and potentially modifying modprobe files or kernel parameters, you need to regenerate the initial RAM disk image:
sudo mkinitcpio -P
	Reboot: A reboot is necessary for the new driver, blacklisting, and KMS setting to take effect.
sudo reboot


	Managing GPU Modes (Integrated, Hybrid, Dedicated)
	Software Switching Methods (If not using BIOS settings or for on-the-fly changes):
	(Recommended) supergfxctl: This tool is specifically designed for managing graphics on ASUS laptops.1
	Install it (likely from the AUR, e.g., yay -S supergfxctl). Follow its specific installation and setup instructions on the Arch Wiki or its project page.
yay -S supergfxctl
	start the service
sudo systemctl enable --now sypergfxd.service
	To switch to Integrated GPU Only (Max Battery):
sudo supergfxctl --mode Integrated
	To switch to Hybrid Mode:
supergfxctl --mode Hybrid
	To switch to Dedicated GPU Mode (if supported by supergfxctl on your model):
supergfxctl --mode AsusMuxDgpu

(Alternative) envycontrol: Another popular tool for Optimus laptops.
Install it (check Arch Wiki/AUR: yay -S envycontrol).
Check current status: sudo envycontrol -q
Switch to Integrated: sudo envycontrol -s integrated (Reboot required)
Switch to Hybrid: sudo envycontrol -s hybrid (Reboot required)
Switch to NVIDIA: sudo envycontrol -s nvidia (Reboot required)
(Advanced/Fallback) acpi_call: Manually turns off the GPU via ACPI calls. This is more complex and requires finding the specific command for your laptop model. Use this only if BIOS options and tools like supergfxctl/envycontrol fail. See the NVIDIA Optimus Arch Wiki page for details. Requires acpi_call-dkms.
Using Hybrid Mode (PRIME Render Offload):
When in Hybrid mode (either via BIOS or a software tool), the Intel GPU runs your desktop (Hyprland/GNOME).
To run a specific application using the NVIDIA GPU for better performance (e.g., a game):
Bash
prime-run <command_to_run_application>
(Example: prime-run steam)
The prime-run script (from the nvidia-prime package, which is a dependency of nvidia-utils or installable separately sudo pacman -S nvidia-prime) sets the necessary environment variables (__NV_PRIME_RENDER_OFFLOAD=1, __GLX_VENDOR_LIBRARY_NAME=nvidia, etc.).2
Best Option for Disabling dGPU (Battery Saving):
BIOS/UEFI "Eco Mode" / "iGPU Mode": Most reliable if available.
supergfxctl --mode Integrated or envycontrol -s integrated: Best software methods, designed for ASUS laptops (supergfxctl) or generally reliable (envycontrol).
3. Handling Kernel and Driver Updates
Kernel Updates: Because you installed nvidia-dkms, the DKMS system service will automatically attempt to rebuild the NVIDIA module for the newly installed kernel version whenever you update your kernel (e.g., via sudo pacman -Syu). Usually, no manual action is needed. Watch the pacman output for any DKMS errors.
NVIDIA Driver Updates: When nvidia-dkms, nvidia-utils, etc., get updated via sudo pacman -Syu:
The DKMS module for your currently running kernel will be rebuilt automatically using the new driver version.
It is highly recommended to reboot after an NVIDIA driver update to ensure all parts of the system are using the new, consistent driver version.
4. Wayland Considerations (Hyprland/GNOME)
nvidia_drm.modeset=1: Essential, as configured in step 1.
PRIME Render Offload: This is the standard way to use the dGPU under Wayland in Hybrid mode. prime-run works well.
Hyprland: Check the Hyprland Wiki NVIDIA page for any specific environment variables or settings recommended (e.g., WLR_NO_HARDWARE_CURSORS=1 might sometimes help, or specific LIBVA_DRIVER_NAME settings if using hardware video acceleration).
GNOME: Wayland session on GNOME generally works well with the proprietary NVIDIA driver when KMS is enabled. Ensure you are selecting the "GNOME" (Wayland) session at login, not "GNOME on Xorg".
Suspend/Hibernate: Power management with NVIDIA Optimus can sometimes be tricky. Using Integrated mode (via BIOS or supergfxctl/envycontrol) before suspending might improve reliability.
5. ASUS TUF F15 Specifics
Prioritize using the BIOS/UEFI MUX switch settings if they exist for switching between Integrated, Hybrid, and Dedicated modes.
If using software switching, supergfxctl is often tailored for ASUS laptops and is a good first choice.
By following these steps, focusing on nvidia-dkms, enabling KMS, and using either the BIOS MUX switch or a tool like supergfxctl, you should achieve a stable and flexible setup for your NVIDIA GPU on Arch Linux with Wayland. Always refer back to the Arch Wiki pages linked for the most up-to-date details and commands.
Okay, here's a comprehensive guide based only on the Arch Wiki and relevant linked resources for managing the NVIDIA 3050 Ti on your ASUS TUF F15 (2022) laptop running Arch Linux with Wayland (Hyprland/GNOME).
Current Date: Saturday, May 3, 2025
Important Considerations:
Wayland & NVIDIA: While support has improved significantly, especially with recent drivers using the GBM backend, NVIDIA's proprietary drivers on Wayland (particularly complex compositors like Hyprland) can still have quirks. Hyprland's wiki explicitly notes NVIDIA is unsupported, although many users have success. GNOME generally has better integration.
ASUS Tools: Your ASUS TUF laptop benefits greatly from the asusctl and supergfxctl tools developed by the ASUS Linux community.3 These are often the most reliable way to manage specific hardware features like MUX switches and power modes on these laptops.
Rolling Releases: Arch Linux is a rolling release.4 Pay attention during system upgrades (pacman -Syu), especially kernel and NVIDIA driver updates, although DKMS significantly simplifies this.
1. Prerequisites
Enable Multilib Repository: Needed for 32-bit NVIDIA libraries (for Steam, Wine, etc.).
Edit /etc/pacman.conf (e.g., sudo nano /etc/pacman.conf).5
Uncomment the [multilib] section by removing the # from the [multilib] line and the Include = ... line below it.
Save the file (Ctrl+O in nano, then Enter) and exit (Ctrl+X).
Update the package database: sudo pacman -Syu
Install Headers & DKMS: Essential for automatically rebuilding the driver for new kernels.
Install headers for your kernel(s) (e.g., linux-headers for the standard kernel, linux-lts-headers for the LTS kernel).6
Install DKMS: sudo pacman -S dkms linux-headers (replace linux-headers if using a different kernel).
2. NVIDIA Proprietary Driver Installation
Install Driver Packages: For your RTX 3050 Ti and to handle kernel updates automatically, use the DKMS variant.
Bash
sudo pacman -S nvidia-dkms nvidia-utils lib32-nvidia-utils nvidia-settings


nvidia-dkms: The main driver package that uses DKMS.
nvidia-utils: Core utilities and libraries (like nvidia-smi).
lib32-nvidia-utils: 32-bit libraries (requires multilib repo).
nvidia-settings: Graphical configuration utility.
Blacklist Nouveau: The open-source driver (nouveau) conflicts with the proprietary driver. The nvidia-dkms package should handle this automatically by installing a file in /usr/lib/modprobe.d/.
Verify/Manual Blacklist (if needed): If you encounter issues, ensure nouveau is blacklisted. Create a file:
Bash
sudo nano /etc/modprobe.d/blacklist-nouveau.conf
Add the line:
blacklist nouveau
Save and exit.
Enable NVIDIA Kernel Mode Setting (KMS): Crucial for Wayland.
You need to add nvidia_drm.modeset=1 to your kernel parameters. How you do this depends on your bootloader:
GRUB:
Edit /etc/default/grub (sudo nano /etc/default/grub).
Find the GRUB_CMDLINE_LINUX_DEFAULT="..." line.
Add nvidia_drm.modeset=1 inside the quotes, separated by spaces from other options (e.g., GRUB_CMDLINE_LINUX_DEFAULT="quiet splash nvidia_drm.modeset=1").
Save and exit.
Regenerate the GRUB configuration: sudo grub-mkconfig -o /boot/grub/grub.cfg
systemd-boot:
Edit your loader entry file in /boot/loader/entries/ (e.g., /boot/loader/entries/arch.conf).
Find the options line.
Add nvidia_drm.modeset=1 to the end of that line, separated by spaces.
Save and exit.
Rebuild Initramfs: Ensure the NVIDIA modules are included early. While DKMS hooks often handle this, manual rebuild after the first install or changes is good practice.
Bash
sudo mkinitcpio -P


Reboot: A reboot is required for the new driver, blacklisting, and kernel parameters to take effect.
Bash
sudo reboot
	Verify Installation: After rebooting, check if the driver is loaded:
	Bash
nvidia-smi
	You should see details about your 3050 Ti. If this command fails, something went wrong during installation or module loading. Check journalctl -b for errors.
	3. GPU Mode Management (Integrated, Hybrid, Dedicated)
	Your ASUS TUF laptop has hybrid graphics (Intel iGPU + NVIDIA dGPU). Managing which GPU is active is key for performance and battery life. The recommended tools for your specific laptop are asusctl and supergfxctl.
	Install ASUS Tools:
yay -S asusctl
	asusctl: Manages ASUS-specific features like fan curves, keyboard backlight, battery charge limits, and importantly, the MUX switch (if your specific model variant has one controllable via software).
	sudo systemctl enable --now asusd.service

INTEL
	To instal monitoring tools
sudo pacman -S intel-gpu-tools	
	to install media encoders and other importatnt for efficancy and hardware decoding
sudo pacman -S libva-utils libva-intel-driver intel-media-driver
	to check all encoders/decoders
vainfo

POWER MANAGERMENT
	downlaod and install powertop
sudo pacman -S powertop
	go to the tunable tab to see the bad ones, hogging energy and toggle them to good if they are bad
sudo powertop	enter and up down arrow 
	to make these changes persistant across reboots
powertop --auto-tune
	install tlp and tlp-rdw for wifi and radio like bliuetoth and stuff
sudo pacman -S tlp tlp-rdw
	enable the servcie and restart
sudo systemctl enable tlp.service
	check teh status of the service
sudo systemctl status tlp.service

to check your monitor (this changes from install to install on the same pc)
hyprctl monitors
change only for current session from bash
hyprctl keyword monitor NAME,RESOLUTION@60,POSITION,SCALE
eg hyprctl keyword monitor eDP-1,1920x1080@60,0x0,1.00

make persistant across reboots. 
nano ~/.config/hypr/hyprland.conf
add this under monitor for legibility and orginaizaiton
monitor=eDP-1,1920x1080@60,0x0,1.00
--------------------
one can list all the PCI display controllers available
lspci -d ::03xx

hyprland which gpu being used from hyprland wiki multiple gpus
	to see which card is which (Do not use the card1 symlink indicated here. It is dynamically assigned at boot and is subject to frequent change)
ls -l /dev/dri/by-path

telling hyprland to use a certain GPU
	After determining which “card” belongs to which GPU, we can now tell Hyprland which GPUs to use by setting the AQ_DRM_DEVICES environment variable.
	
If you would like to use another GPU, or the wrong GPU is picked by default, set AQ_DRM_DEVICES to a :-separated list of card paths, e.g.

env = AQ_DRM_DEVICES,/dev/dri/card0:/dev/dri/card1

Here, we tell Hyprland which GPUs it’s allowed to use, in order of priority. For example, card0 will be the primary renderer, but if it isn’t available for whatever reason, then card1 is primary.

Do note that if you have an external monitor connected to, for example card1, that card must be included in AQ_DRM_DEVICES for the monitor to work, though it doesn’t have to be the primary renderer.

You should now be able to use an integrated GPU for lighter GPU loads, including Hyprland, or default to your dGPU if you prefer.

uwsm users are advised to export the AQ_DRM_DEVICES variable inside ~/.config/uwsm/env-hyprland, instead. This method ensures that the variable is properly exported to the systemd environment without conflicting with other compositors or desktop environments.

export AQ_DRM_DEVICES="/dev/dri/card0:/dev/dri/card1"

(how to tell which one is which: The lspci output shows the PCI address (0000:00:02.0 for Intel, 0000:01:00.0 for NVIDIA). The ls -l /dev/dri/by-path output links these exact PCI addresses (e.g., pci-0000:00:02.0) to the device files (/dev/dri/cardX, /dev/dri/renderDX). You match the PCI address from lspci to the path in /dev/dri/by-path.)
	
	to export for uwsm users like me
nano ~/.bash_profile

	add this line but note which card is for which gpu card1 or card0 and then just enter that card without brackets. (Use the arrow keys to navigate, type the line, then press Ctrl + X to exit, Y to confirm saving, and Enter to confirm the filename).
export AQ_DRM_DEVICES=/dev/dri/<card>
---------
	
	to check which desktop manager i'm currently logged in with 
loginctl show-session $XDG_SESSION_ID | grep Desktop=
file /etc/systemd/system/display-manager.service

	to see all desktop manager installed.
pacman -Qq | grep -E 'sddm|lightdm|gdm|lxdm|ly|greetd|xdm|login-manager'

	to log out of current session using loginctl
loginctl terminate session $XDG_SESSION_ID
	



There is a way to open another instance of an already opend app, eg for featherpad app. 
featherpad --standalone /path/to/file

	
there are two seperate theming engine 
gtk and qt and they can coexist with no issues
	
services to enable

	systemctl enable for all of these

systemctl enable usbmuxd.service cronie.service tlp.service udisks2.service thermald.service sddm.service connman.service iwd.service bluetooth.service smartd.service firewalld.service avahi-daemon.service systemd-timesyncd.service

	likly not installed but if instlald, enable them aswell

fwupd.service asusd.service enable reflector.timer reflector.service reflector.timer plexmediaserver.service tumbler.service

34.	for reflector 
To Enable Periodic Updates: sudo systemctl  (You'll need to configure /etc/xdg/reflector/reflector.conf first)

for sysstat
System performance monitoring tools (sar, iostat). Service: sysstat.service and associated timers (sysstat-collect.timer, sysstat-summary.timer) for data collection

You can use sudo powertop --auto-tune to apply its suggestions on boot via a custom service if desired, but this is often handled by TLP.

35.	services to enable with --user flag

systemctl --user enable pipewire.socket

systemctl --user enable pipewire-pulse.socket

systemctl --user enable wireplumber.service

36.	BATTERY LIMITER
	this sets it temperarily. (skip this)
echo 60 | sudo tee /sys/class/power_supply/BAT1/charge_control_end_threshold

this is persistant
	sudo nano /etc/systemd/system/bat.service

	save this in the newly created nano file
	
[Unit]
Description=Set Battery Charge Threshold for BAT1 to 60%
After=multi-user.target
StartLimitBurst=0

[Service]
Type=oneshot
Restart=on-failure
ExecStart=/bin/bash -c 'echo 60 > /sys/class/power_supply/BAT1/charge_control_end_threshold'

[Install]
WantedBy=multi-user.target

	just enable it if you're in chroot.
sudo systemctl daemon-reload
sudo systemctl enable bat.service
sudo systemctl start bat.service

list packages by time of install

awk 'NR==FNR { if (/\[ALPM\] installed/) { ts = $1; gsub(/^\[|\]$/, "", ts); pkg = $4; if (!(pkg in fit)) fit[pkg] = ts; } next; } { if ($0 in fit) print fit[$0], $0; }' /var/log/pacman.log <(pacman -Qq) | sort -k1,1 | awk '{print $2}'

to make the above command a funtion in bash

Okay, here's how you can save that command as a persistent function in Arch Linux:

    Open your shell configuration file. Since you're likely using Bash, the file is usually located at ~/.bashrc. You can use a text editor like nano or vim:
    Bash

nano ~/.bashrc

Add the function definition. At the end of the file, add the following lines.  I will name the function get_installed_packages:
Bash

get_installed_packages () {
  awk 'NR==FNR { if (/\[ALPM\] installed/) { ts = $1; gsub(/^\[|\]$/, "", ts); pkg = $4; if (!(pkg in fit)) fit[pkg] = ts; } next; } { if ($0 in fit) print fit[$0], $0; }' /var/log/pacman.log <(pacman -Qq) | sort -k1,1 | awk '{print $2}'
}

Save the file and exit the editor. If you're using nano, press Ctrl+X, then Y to save, and then Enter.

Reload your shell configuration. To make the function available in your current terminal session, you need to reload the .bashrc file:
Bash

    source ~/.bashrc

    Now you can use the function by typing get_installed_packages in the terminal.

Keep in mind:

    If you're not using Bash, but instead another shell like zsh, the configuration file might be different (e.g., ~/.zshrc).
    This function definition will be available every time you open a new terminal window.


CLOUDFLAIRE WARP 1.1.1.1
Verify the package installation and service file presence:
The service file is typically warp-svc.service or com.cloudflare.warp.service.
Check if the service file exists:

sudo find / -name 'warp-svc.service' -o -name 'com.cloudflare.warp.service' 2>/dev/null

if you find it and it exists, turn it on with systemctl

sudo systemctl enable --now warp-svc.service

to find and discover new packages: 

PACKAGES






FORCE STOP A PROCESS/APP
	to see if it's running
pgrep <NAME OF THE APP>

	to kill it 
pkill -9 <NAME OF THE APP>
