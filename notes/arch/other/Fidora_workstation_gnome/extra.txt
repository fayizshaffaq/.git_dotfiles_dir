	gnome tweaks
sudo dnf install gnome-tweaks


#DONT PLACE SCRIPTS IN THE HOME DIRECTORY, ESPEICALLY IF THEY ARE AUTO START SCRIPTS BECAUSE THEY WONT BE ABLE TO RUN ON BOOT BECAUSE HOME DIRECTORY RESTRICTS ACESS TO EVEN ROOT DURING EARLY BOOT BECAUSE OF SELINUX THAT FEDORA AND SOME OTHER DISTROS HAVE BUT INSTEAD PLACE THE .SH FILE IN Best Practice: System-wide services should generally use scripts located in standard system directories (like /usr/local/bin/, /opt, etc.), not within user homes.

SCRIPTS
	give scripts perfmission with 
sudo chmod +x file.xyz

	if a script wont start automatically on start up, it might be beasuase of SElinux enforcemnt of context labels. so to check a script's context lable. You'll see output like -rwxr-xr-x. 1 root root system_u:object_r:usr_t:s0 ... xyz.sh. Pay attention to the type context (the third part, e.g., usr_t in this example).
ls -lZ /usr/local/bin/xyz.sh
	Change the SELinux Type Context: Use the chcon command to change the type to bin_t, which is commonly used for executable binaries in system directories.
sudo chcon -t bin_t /usr/local/bin/xyz.sh
	Verify the Change: Run the ls -lZ command again to confirm the type context has changed
ls -lZ /usr/local/bin/xyz.sh

	to open a file 
./file.xyz

	to see ram usage including swap usage 
free -h

	list all disks
lsblk

	for disk usage make sure all these are installed
sudo dnf install sysstat lsof

	usage of disk read and write
iostat -d
	to refresh the usage every second add 1 to the end or 2 for two seconds
iostat -d 1


	Advanced Option: Using bpftrace
	For more precise, real-time monitoring, you can use bpftrace, a tool that leverages eBPF (extended Berkeley Packet Filter) to trace system calls like vfs_read and vfs_write and filter by directory path. This method directly tracks I/O operations for files in your directory but requires familiarity with eBPF and root privileges.
	Example bpftrace Script
	bpftrace
sudo dnf install bpftrace
	look into how to use bpftrace


	to check the disk usage of a user specified directory to see read and write speeds copy the whole thing at once. 
while true; do
  pids=$(lsof +D /mnt/ramdisk | awk 'NR>1 {print $2}' | sort -u | tr '\n' ',')
  if [ ! -z "$pids" ]; then
    pidstat -d -p ${pids%,} 1 1
  fi
  sleep 0.5
done

	How It Works
	lsof +D /path/to/directory: Recursively lists all processes that have files open in the specified directory. The +D option ensures it checks the directory and its subdirectories.

	awk 'NR>1 {print $2}': Extracts the process IDs (PIDs) from the lsof output, skipping the header line.

	sort -u: Removes duplicate PIDs.

	tr '\n' ',': Converts the list of PIDs into a comma-separated string for pidstat.

	pidstat -d -p <PIDs> 1 1: Monitors disk I/O for the specified PIDs over a 1-second interval, reporting once. The -d option shows I/O stats like kilobytes read (kB_rd/s) and written (kB_wr/s) per second.

	sleep 0.5: Pauses for 0.5 seconds before the next check, providing near-continuous monitoring.



SWAP
	turn off swap temperarorly
sudo swapoff -a
	veryfy it's turned off
swapon --show
free -h

	Check for corrupted packages: Verify the integrity of all installed packages to identify discrepancies:
sudo rpm -Va

	check kernal version
uname -r
	reinstall kernal if broken
sudo dnf reinstall kernel

	updating grub conifg
sudo grub2-mkconfig -o /boot/grub2/grub.cfg

	reinstalling grub
sudo grub2-install /dev/<bootpartition see lsblk>
			or
sudo grub2-install --target=x86_64-efi --efi-directory=/boot/efi
	update grub after reinstalling
sudo grub2-mkconfig -o /boot/grub2/grub.cfg


SERVICES
	to check a service status 
sudo systemctl status xyz.service
	to enable a service 
systemctl is-enabled tlp.service
	to check enable disable status of all services
systemctl list-unit-files --type=service --state=enabled
	to check a certain service and filter it with grub
systemctl list-unit-files --type=service | grep xyz.service (or just type half the name of the service and it'll list all with matching results)

PROCESSES
	to check all running processes (man ps to check every option)
ps -x (e for all processes)
	to show all process based on hierarchy
ps -Fe

GREP
	grep is by default case sensitive so this is an opiton to make it not so
grep -i
	to make it exclude a user specified word
grep -v
	holy moly, this option allows you to search through recursively in all the file and directoryes. 
grep -r

BITLOCKER
	unlock bitlocker drive using cryptsetup instead of defualt dislocker
sudo cryptsetup bitlkOpen /dev/<drive find out with lsblk> bitlk_device
	create a directory to mount the unlcoked drive
sudo mkdir /mnt/bitlk
	mount the drive to access files
sudo mount /dev/mapper/bitlk_device /mnt/bitlk
CLEAN UP 	unmound the drive after done
sudo umount /mnt/bitlk
	close the drive
sudo cryptsetup close bitlk_device

	firefox container for saved login, go to about:profiles and then from the first profile choose root directory and open directory go back two directorys in the file manager until you see .mozilla in the home directory. This is the entire folder you need for everything. you can backup this folder, or replace this folder with a previously backed up folder and everything will be logged in. 

	to completley wipe firefox data and reset everything: 
rm -rf ~/.mozilla/firefox/
rm -rf ~/.mozilla
rm -rf ~/.cache/mozilla

	symbolic link for firefox
sudo ln -s /run/media/fayiz/firefox/.mozilla /home/fayiz/.mozilla


	to truly dublicate and create a backup of a folder recurseivly 
cp -a /path/to/your/source_folder /path/to/your/backup_destination/source_folder_backup
	if the targe folder is in the same dir you're currently in and you want to dublicate the xyz folder
cp -a xyz ./xyz_backup (_backup was added to rename the file so they're not the same name)
	
	to open a directory in file explorer 
xdg-open . (dot for current directory) or /usr/local/.... etc. 

SYMLINKS AKA SYMBOLICK LINKS
	the overview of the command
ln -s TARGET LINK_NAME (first the target name with full path if it's anywhere over the home directory and in the root folder) and /(then the link name)
	this following thing worked.  i created an empty folder on the desktop named yothis and there's already a folder in downloads named geekbench..... i want for when i enter the folder on the desktop to show me files in the downlaods folder geekbench
ln -s ~/Downloads/Geekbench-6.4.0-Linux ~/Desktop/yothis


fedora defualt console/ terminal is ptyxis

	to check the permission of a file
stat <file> 
eg stat xyz.sh

WAYDROID
	first downlaod venddor and system files of the foe either vanilla or gapps aka either linage 18 or lineage 20 then install waydroid
sudo dnf install waydroid
	DONT START YET
	extract and copy the system.img and vendor.img to /etc/waydroid-extra/images/ 
sudo mkdir /etc/waydroid-extra/
sudo mkdir /etc/waydroid-extra/images
	move or copy the files to the /etc.... directory with cp or mv
mv ~/Downloads/system.img /etc/waydroid-extra/images/
mv ~/Downloads/vendor.img /etc/waydroid-extra/images/
	since you moved the files manually, you need to add the -f option to initiializing waydoid
sudo waydroid init -f
sudo waydroid status
sudo waydroid session start
	hudini for translation layer for arm apps to work. there's a github. first root.
	
ROOT AND STUFF EXTRA
	copy the whole thing and paste in terinal if or do it one by one. 
git clone https://github.com/casualsnek/waydroid_script
cd waydroid_script
python3 -m venv venv
venv/bin/pip install -r requirements.txt
sudo venv/bin/python3 main.py

	list packages by date installed
rpm -qa --last
	list packages by date but only with certain keywords
rpm -qa --last | grep xyz
	list all packages
sudo dnf list or sudo dnf list | grep xyz
	to Precise Search (Usually Best): This command specifically asks dnf which package provides the actual xyz executable file. This is often the most reliable way to search for a package you can't find on in any installed repo or repos (This searches for any package that installs a file named aapt inside a bin directory, which is where executables usually live), it takes a while to search though. 
sudo dnf provides */bin/xyz
	to save all saved packages name's to a txt file and sort them by date
rpm -qa --qf '%{installtime:date} %{name}-%{version}\n' | sort | nl > installed_packages_sorted.txt

list files
ls
	to show detials of lsited files
ls -l
	to open a file and read it's content
cat /xyz

CHRIS TITUS SCRIPT FOR LINUX ALL DISTRO
curl -fsSL https://christitus.com/linux | sh

PERMISSIONS
file type	owner 		group 		others
- d l 		rwx		rwx		rwx
	numerical values for file permissions (always constant)
r=4 w=2 x=1
	full permission for user group and root would be to add the values for all of them for each one eg owner=(rwx=7) group=(rwx=7) others=(rwx=7)
777
	following are some numerical permission values
775, 755, 124, 236, and so on and so forth by adding diffrent values under
	to set permission recursivly, -R (capital R)

to find/search for a folder or file
	by extention in the current directory and forward (.) the period means current dirocotory (*)astrick denotes file with anyname with the following extention the astricks could be used in so many places in a lot of diffrenct commands. 
sudo find . -name *.txt
	to exclude a folder/file with a certain name, using grep and the -v option
sudo find /home -name picture.png | grep -v xyz
	to search for a file in a directory/subdirectories and recursivly (change the permission) or (delete found files) all with one command with -exec (exicute command) and the plus at the end means to stop the command.
sudo find /home/fayiz -name 2024 -type f -exec chmod 600 +

CPU
	download and install intel-undervolt for checking ive power consumption
sudo dnf install intel-undervolt
intel-undervolt measure
	downlaod and install MSR (Model specific registary for cpu to read it's config and stuff.)
sudo dnf install msr-tools
	check which file drives turbo boost for your cpu (one will list the file the other will return no file found or something.)
ls /sys/devices/system/cpu/intel_pstate/no_turbo
ls /sys/devices/system/cpu/cpufreq/boost
	mine is no_turbo one this one. 
ls /sys/devices/system/cpu/intel_pstate/no_turbo
	check current turbo status (0 for true, and 1 for false)
cat /sys/devices/system/cpu/intel_pstate/no_turbo
	to disable turbo boost 
echo 1 | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo
	to enable turbo boost
echo 0 | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo
	this is not peristant across reboots, to make it so, you gotta create a systemd service
sudo nano /etc/systemd/system/set-turbo-boost.service
	and paste one of the following to its conents, or paste both then uncomment only one. 
[Unit]
Description=Set Intel Turbo Boost State at Boot

[Service]
Type=oneshot
# --- CHOOSE ONE of the following ExecStart lines ---
# To DISABLE Turbo Boost persistently:
# ExecStart=/bin/sh -c "echo 1 > /sys/devices/system/cpu/intel_pstate/no_turbo"

# To ENABLE Turbo Boost persistently (usually default, but ensures it):
ExecStart=/bin/sh -c "echo 0 > /sys/devices/system/cpu/intel_pstate/no_turbo"
# --- Make sure only ONE ExecStart line is uncommented ---

RemainAfterExit=yes

[Install]
WantedBy=multi-user.target

--------------this is where the text ends ----------------
	enable the service to start on boot, or start it now by sudo start....
sudo systemctl enable set-turbo-boost.service
	check teh status after restarting your pc or checking now if you started the service without rebooting
cat /sys/devices/system/cpu/intel_pstate/no_turbo
sudo systemctl status set-turbo-boost.service

	stresstest great tool!!!
sudo dnf install s-tui
	Monitoring: Use lscpu, turbostat (for Intel freq/power/temp), htop, powertop, and sensor tools (lm_sensors) to monitor the effects of your changes.
	
	to see how much time processes have to way for the cpu to process there quieres : see average load time (around 0.5 is good anything over 1 is bad)
uptime
	system monitor
htop
	Turbo Boost and Power Limit Control:
	/sys filesystem: Linux exposes many hardware settings through the /sys filesystem. You can directly interact with files in directories like /sys/devices/system/cpu/intel_pstate/ to influence CPU frequency scaling and Turbo Boost behavior. For example, you can check if turbo is enabled or disable it by writing to specific files (requires root privileges).   

	cpupower: A command-line tool to show and set CPU frequency governors and related settings, which can indirectly affect Turbo Boost behavior.  
	
	tuned: A dynamic adaptive system tuning daemon that can adjust system settings based on predefined profiles, some of which can impact CPU performance and power consumption. You can also create custom profiles.

GPU
	INTEL
	check if intel drivers are installed with 
dnf list installed | grep intel-media-driver
	if missing, install with 
sudo dnf install intel-media-driver	
	download and install libva-utils, this package has vainfo included
sudo dnf install libva-utils
	This command lists the VA-API drivers and supported video profiles (e.g., H.264, VP9, HEVC) for your GPUs.
vainfo
	instal media drivers by compiling for your distro for better hardware encoding/decoding and low power consumtpion while doing so. media drivers need to be instaled along side graphics drivers. both need to be instlaled. 
https://github.com/intel/media-driver
	alternativly you can enable rpm fustion repo and install an older version, github has the lateest versoin 
sudo dnf install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
	install the package
sudo dnf install intel-media-driver
	verification
sudo dnf install libva-utils
vainfo
NVIDIA
	install the drivers and have them work. 
sudo dnf update
sudo reboot
sudo dnf install kernel-devel kernel-headers gcc make dkms akmod-nvidia
sudo dnf install xorg-x11-drv-nvidia xorg-x11-drv-nvidia-libs xorg-x11-drv-nvidia-cuda
	Wait for Module Building: After installing akmod-nvidia (or if it was already installed, after a kernel update), the system should automatically start building the module in the background. This can take 5-15 minutes. You might not see obvious output unless you watch system logs. Be patient. You can check if the process is running using top or htop and looking for processes like akmods, dkms, gcc, or make.
	Force Rebuild (Optional but Recommended if unsure): If you suspect the automatic build didn't trigger or complete after waiting, you can force it:
sudo akmods --force
	wait 10 minutes and see system montior before rebooting
sudo reboot
	if it still doesn't work secure boot might be the culprit.
	NVIDIA Turn off completely.
	Dedicated Tools (e.g., supergfxctl, asusctl - Use if needed):
	Some laptops (especially ASUS ROG models, which often have Intel/NVIDIA combinations) have community-developed tools like asusctl (or the more generic supergfxctl) that provide command-line or graphical ways to switch between integrated-only, hybrid (Optimus/on-demand), and sometimes Nvidia-only modes. These often work by manipulating ACPI variables or driver settings to achieve a more complete power-off state than RTD3, sometimes even simulating a MUX switch if the hardware supports it without a full reboot.
    These need to be installed separately (check dnf or community repositories). Check if one is appropriate for your specific laptop model.
    Example usage (conceptual): supergfxctl -m integrated.

	to instlal asusctl first add the repo.
sudo dnf copr enable lukenukem/asus-linux
	install it asusctl and asusctl-rog-gui is a gui for it, not necessory but it's here.
sudo dnf install asusctl asusctl-rog-gui
	also install supergfxctl
sudo dnf install supergfxctl
	check the current profie of the gpu, wheather it's hybrid, integrated or dedicated mux. 
supergfxctl -s
	or
supergfxctl --status
	Integrated, Hybrid, AsusMuxDgpu (pick one)
sudo supergfxctl -m Integrated
sudo supergfxctl -m AsusMuxDgpu
sudo supergfxctl -m Hybrid
	check with nvtop to see if dedicated gpu is still showing up or not if you've toggled on Integrated
nvtop
	to blacklist opensource nvidia drivers using a modprobe config file
sudo nano /etc/modprobe.d/blacklist-nouveau.conf
	add the following lines to it. 
blacklist nouveau
options nouveau modeset=0
	Rebuild your initramfs (initial RAM filesystem) to include this change early in boot:
sudo dracut --force
	
	
	to check if nvidia drivers are installed
nvidia-smi
	or this to also check
lsmod | grep nvidia
	dnf search with astrick to show any and all stuff with nvidia in it's name
dnf list installed nvidia*	
	rpm search
rpm -q xorg-x11-drv-nvidia	
	if the drivers aren't installed, enable the RPM fusion repositories and then install
sudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
sudo dnf install akmod-nvidia
	for va-api support on nvidia (hardware decoding) also insall
sudo dnf install nvidia-vaapi-driver
	wait a few mintues and check if drivers have initalized by monetering the system monitor usage to see if anything is active, after the dust has settled reboot
sudo reboot


	Identify What’s Decoding Videos in Firefox
	To determine if the CPU, integrated Intel GPU, or dedicated NVIDIA GPU is decoding videos, use one of these methods:
	Method 1: Monitor GPU Usage During Playback
	Install Monitoring Tools:
	For Intel GPU:
sudo dnf install intel-gpu-tools
	For NVIDIA GPU:
sudo dnf install nvtop	
	Open two terminals two check which one is being used when doing something like playing a video
Terminal 1: sudo intel_gpu_top (monitors Intel GPU activity).
Terminal 2: sudo nvtop (monitors NVIDIA GPU activity).


RPM
	to search an installed package on your system through fuzzy search
rpm -qa | grep xyz

SYSTEMD
	to check which part of linux takes the most amount of time to boot, to trouble shoot what's causing slow boot times
systemd-analyze
	to check EXACTLY which modular paart is taking the most amount of time. 
systemd-analyze blame
	to check which service is currently running
systemctl list-units --type=service --state=running

	list rpm packages by time of install
rpm -qa --last
	(rpm: This is the command-line tool for managing RPM packages.
-q: This flag is for querying the package database.
-a: This option, used with -q, queries all installed packages.
--last: This option tells rpm to display the list of packages sorted by their installation date and time, with the most recently installed packages listed first.)

	list rpm package by time of install in reverse (sort it theother way)
rpm -qa --last | tac
	(the rpm command's --last option only sorts with the most recent first, and it doesn't have a built-in way to reverse that specific sort directly.However, you can easily reverse the output using standard Linux command-line tools by piping the output of rpm -qa --last to the tac command. tac is essentially the reverse of the cat command; it prints files or standard input in reverse line order.)
	
The Pipe (|)
	Purpose: Connects the standard output of the command on the left to the standard input of the command on the right. It creates a "pipeline" of commands where data flows from one to the next.
	How it's used: command1 | command2
	Explanation: command1 runs, and its output is not displayed on the screen directly, but instead becomes the input for command2. command2 then processes that input.
	Example: Listing files and then counting them. 
	ls -l | wc -l
	ls -l: Lists files in the current directory in long format.
	|: Takes the output of ls -l.
	wc -l: Receives the list of files as input and counts the number of lines.
	Result: You'll see a single number, which is the count of files and directories in the current location.

The Semicolon (;)
	Purpose: Executes commands sequentially, one after the other, regardless of whether the previous command succeeded or failed.
	How it's used: command1 ; command2 ; command3
	Explanation: The shell runs command1. Once command1 finishes, command2 starts, and so on. If command1 fails, command2 still runs.
	Example: Running two commands back-to-back.
	echo "Hello" ; echo "World"
	echo "Hello": Prints "Hello".
	;: Separates the commands.
	echo "World": Prints "World".
	Result: Both "Hello" and "World" will be printed on separate lines.
	
The Double Ampersand (&&)
	Purpose: Executes the command on the right only if the command on the left succeeds (exits with a zero status). This is a logical AND operation.
	How it's used: command1 && command2
	Explanation: command1 runs. If command1 is successful, then command2 runs. If command1 fails, command2 is not executed. This is often used for dependency – "do this, AND if that worked, then do this other thing."
	Example: Update package lists and then upgrade if the update was successful.
	Bash
	sudo dnf check-update && sudo dnf upgrade
	sudo dnf check-update: Checks for available package updates. It will exit with a zero status if successful.
	&&: If check-update is successful...
	sudo dnf upgrade: ...then run the upgrade command.
	Result: If check-update finds updates and runs without error, dnf upgrade will then run. If check-update fails for some reason, dnf upgrade will not be attempted.

The Double Pipe (||)
	Purpose: Executes the command on the right only if the command on the left fails (exits with a non-zero status). This is a logical OR operation.
	How it's used: command1 || command2
	Explanation: command1 runs. If command1 fails, then command2 runs. If command1 succeeds, command2 is not executed. This is often used for alternatives or fallback actions – "try this, OR if that failed, do this other thing."
	Example: Try to start a service, and if it fails, print an error message.
	Bash systemctl start my-service || echo "Failed to start my-service"
	systemctl start my-service: Tries to start a system service. It will likely exit with a non-zero status if it fails.
	||: If starting the service fails...
	echo "Failed to start my-service": ...then print this error message.
	Result: If my-service starts successfully, you won't see the error message. If it fails to start, you will see "Failed to start my-service".

The Single Ampersand (&)
	Purpose: Runs the command in the background. This allows you to continue using your terminal while the command is running.
	How it's used: command &
	Explanation: The shell starts command and immediately returns control to you, allowing you to type and run other commands. The background command's output might still appear in your terminal unless redirected.
	Example: Starting a graphical application from the terminal without blocking the terminal.
	Bash firefox &
	firefox: The command to launch the Firefox browser.
	&: Runs firefox in the background.
	Result: Firefox will open, and you will immediately get your terminal prompt back to run other commands. You might see a job number and PID displayed.

Parentheses (())
	Purpose: Groups commands to be executed in a subshell. A subshell is a child process of your current shell, with its own environment variables, working directory, etc. Changes made within a subshell (like changing directories) do not affect the parent shell.
	How it's used: (command1 ; command2) or (command1 | command2) etc.
	Explanation: The commands inside the parentheses are executed in a separate, isolated shell environment.
	Example: Changing directory and listing files in a subshell without affecting the current directory of your main shell.
	Bash pwd ; (cd /tmp ; pwd) ; pwd
	pwd: Prints the current working directory.
	(cd /tmp ; pwd):
	( ... ): Creates a subshell.
	cd /tmp: Changes directory within the subshell to /tmp.
	;: Separates commands within the subshell.
	pwd: Prints the working directory within the subshell (which is /tmp).
	;: Separates the subshell command from the next command in the parent shell.
	pwd: Prints the current working directory in the original parent shell.
	Result: You will see your original directory, then /tmp, and then your original directory again. The cd /tmp command inside the parentheses did not change the directory of the main shell process.

Key Differences Summarized:
	| (Pipe): Connects the output of one command to the input of another. Focus is on data flow.
	; (Semicolon): Executes commands sequentially, regardless of success or failure. Focus is on simple ordering.
	&& (Double Ampersand): Executes the next command only on success of the previous one. Focus is on conditional execution based on success.
	|| (Double Pipe): Executes the next command only on failure of the previous one. Focus is on conditional execution based on failure (fallback).
	& (Single Ampersand): Runs a command in the background. Focus is on not blocking the current terminal session.
	() (Parentheses): Groups commands to run in an isolated subshell. Focus is on creating a temporary environment.
	Understanding these symbols gives you powerful control over scripting and combining commands efficiently in the Linux terminal!
	
	
	flatpack jdownloader restrioctions for download path selinux /mnt/ramdisk
flatpak override --filesystem=/mnt org.jdownloader.JDownloader

HYPRLAND 
	tool for taking screenshots install it first
hypershot
	tool for enabling notifications on hyprland, notification deamon for the wayland compositior
swaynotificationcenter / swaync (they're both the same just diffrent names.)
	library for notifications (this tells swaync that there's a notification and then swaync displas the notification), libnotify ships with gnome out of the box.
libnotify
	hyperland needs a lot of things to work like a regular DE, the good thing is everything is modular, so you can pick and choose what you like and overfit them into your setup. god i can't fucking belive this is real. cool af!!, there are a bunch of tools listed in one place for hyprland and it's caled hypr Ecosystem
hypr ecosystem
	
